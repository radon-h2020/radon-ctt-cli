# coding: utf-8

"""
    RADON CTT Server API

    This is API of the RADON Continuous Testing Tool (CTT) Server: <a href=\"https://github.com/radon-h2020/radon-ctt\">https://github.com/radon-h2020/radon-ctt<a/>  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_result(self, **kwargs):  # noqa: E501
        """Creates new result  # noqa: E501

        Creates a new result based on a previously run execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_result(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param POSTResult body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_result_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_result_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_result_with_http_info(self, **kwargs):  # noqa: E501
        """Creates new result  # noqa: E501

        Creates a new result based on a previously run execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_result_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param POSTResult body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_result" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_result_by_uuid(self, result_uuid, **kwargs):  # noqa: E501
        """Delete a result  # noqa: E501

        Deletes the result with the given UUID on it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_result_by_uuid(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to delete (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
            return data

    def delete_result_by_uuid_with_http_info(self, result_uuid, **kwargs):  # noqa: E501
        """Delete a result  # noqa: E501

        Deletes the result with the given UUID on it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_result_by_uuid_with_http_info(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to delete (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_result_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_uuid' is set
        if ('result_uuid' not in params or
                params['result_uuid'] is None):
            raise ValueError("Missing the required parameter `result_uuid` when calling `delete_result_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'result_uuid' in params:
            path_params['result_uuid'] = params['result_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/{result_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_result_by_uuid(self, result_uuid, **kwargs):  # noqa: E501
        """Downloads the generated results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_result_by_uuid(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to download (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.download_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
            return data

    def download_result_by_uuid_with_http_info(self, result_uuid, **kwargs):  # noqa: E501
        """Downloads the generated results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_result_by_uuid_with_http_info(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to download (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_result_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_uuid' is set
        if ('result_uuid' not in params or
                params['result_uuid'] is None):
            raise ValueError("Missing the required parameter `result_uuid` when calling `download_result_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'result_uuid' in params:
            path_params['result_uuid'] = params['result_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/{result_uuid}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_result_by_uuid(self, result_uuid, **kwargs):  # noqa: E501
        """Retrieve a result  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_result_by_uuid(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to return (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_result_by_uuid_with_http_info(result_uuid, **kwargs)  # noqa: E501
            return data

    def get_result_by_uuid_with_http_info(self, result_uuid, **kwargs):  # noqa: E501
        """Retrieve a result  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_result_by_uuid_with_http_info(result_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str result_uuid: UUID of the result to return (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['result_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_result_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'result_uuid' is set
        if ('result_uuid' not in params or
                params['result_uuid'] is None):
            raise ValueError("Missing the required parameter `result_uuid` when calling `get_result_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'result_uuid' in params:
            path_params['result_uuid'] = params['result_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result/{result_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Result',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_results(self, **kwargs):  # noqa: E501
        """Get all results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Result]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_results_with_http_info(self, **kwargs):  # noqa: E501
        """Get all results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Result]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Result]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
